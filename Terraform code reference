pipeline {
    agent {
        label 'docker'
    }
    environment {
        ENV = 'dev'
        
        // GCP_CREDENTIALS = credentials('project-dev-svc-json')
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/bpurnachander/get-ubuntudesktop-iac.git'
            }
        }
        // stage('Get credentials') {
        //     when {
        //         expression {
        //             return terraform in ['skip', 'apply']
        //         }
        //     }
        //     steps {
        //         script {
        //             if (ansible_action == 'skip') {
        //                 echo 'Stage skipped because ansible_action is skip'
        //             } else {
        //                 // Define the path where the GCP credentials will be copied on the agent
        //                 def destPath = '/var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/ansible/service-account.json'

        //                 // Write the secret file to the destination path on the agent
        //                 writeFile file: destPath, text: new String(readFile(env.GCP_CREDENTIALS).bytes)

        //                 sh """
        //                 sudo cp /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/ansible/ansible.cfg /etc/ansible/ansible.cfg
        //                 """
        //             }
        //         }
        //     }
        // }
        stage('terraform_plan') {
            when {
                expression {
                    return terraform in ['plan', 'apply']
                }
            }
            steps {
                dir("./adq-ubuntudesktop/terraform/environments/${ENV}") {
                    
                    sh """
                    
                    terraform init
                    terraform plan --var-file="terraform.tfvars"
                    
                    """
                }
            }
        }
        stage('Check and Apply Terraform') {
            when {
                expression {
                    return terraform == 'apply'
                }
            }
            steps {
                dir("./adq-ubuntudesktop/terraform/environments/${ENV}") {
                    script {
                        def tfState = sh(script: """
                            terraform state list
                    """, returnStdout: true).trim()

                        if (tfState) {
                            echo 'Existing Terraform state found.'
                            def userInput = input message: 'Existing resources found. Do you want to recreate the infrastructure?', ok: 'Apply', parameters: [choice(name: 'Confirm', choices: 'yes\nno', description: 'Choose yes to recreate or no to abort')]

                            if (userInput == 'yes') {
                                
                                sh """
                                
                                terraform init
                                terraform apply --auto-approve --var-file="terraform.tfvars"
                                
                                """
                            } else {
                                echo 'Aborted by user.'
                                currentBuild.result = 'ABORTED'
                                error('User chose not to recreate infrastructure.')
                            }
                        } else {
                            echo 'No existing resources found. Applying Terraform.'
                            
                            sh """
                            
                            terraform init
                            terraform apply --auto-approve --var-file="terraform.tfvars"
                            
                            """
                        }
                    }
                }
            }
        }
        stage('terraform_destroy') {
            when {
                expression {
                    return terraform == 'destroy'
                }
            }
            steps {
                dir("./adq-ubuntudesktop/terraform/environments/${ENV}") {
                    
                    script {
                        input message: 'Are you sure you want to destroy the infrastructure?', ok: 'Yes'
                    }
                    
                    sh """
                    
                    terraform init
                    terraform destroy --auto-approve --var-file="terraform.tfvars"
                    
                    """
                }
            }
        }
    }
}
